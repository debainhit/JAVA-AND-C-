1.多态的表现形式是什么？
  函数具备多态性： 函数名因为参数列表的不同，同样一个函数一个放在父类一个放在子类中
  对象的多态性。
  
  猫这类事物即具备猫的形态，又具备着动物的形态
  这就是对象的多态性。
  
  简单的说：就是一个对象对应着不同形态（一个对象，多种形态）
  
  多态在代码中的体现：
      父类或者接口的引用指向其子类的对象
      
  面向对象编程语言的一个重要特性就是多态，它使得可以用基类的指针或引用指向派生类的对象，而在具体访问时实现方法动态绑定

2.JAVA中实现多态的方法是？
  java中直接Animal a = new Cat(); 自动类型提升，猫对象提升为动物类型 但是缺点就是特有功能无法访问
  作用：就是限制对特有功能的访问，提高拓展性
  a.eat();
  public static void method(Animal c)//提高扩展性
  {
    c.eat();	
  }

  专业术语：向上转型
  
  如果还想用具体动物猫的特有功能将对象向下转型
  作用：向下转型的目的，是为了使用子类中的特有方法
  Cat c = (Cat)a;
  c.eat();
  c.catchMouse();
  自始至终都是子类对象在做着类型的变化，造型。
  （封装是为了提高代码的复用性）
  
  
3. C++中实现多态的方法是：
   同名函数加基类函数前virtual关键字，其实是覆盖操作
   在继承的类的函数前，不需要加virtual，加上是为了代码的可读性
   
   
4. 多态的好处
   调高代码的拓展性，前期定义的代码可以使用后期的内容。（前期定义的方法，传入父类的引用或者指针，
   通过函数覆盖的方法，新产的的对象，同样可以使用前期定义的方法，代码复用性和维护性提升，从而提高的代码的拓展性）
   
   
5. 多态的局限性
   前期定义的内容不能使用（调用）后期子类的特有内容
   （想调用子类中独有的函数不行，即父类的指针和引用只能调用自身的已经有的基础方法，其中被virtual声明的方法，被子类的覆盖）
   
 6. 多态后
   成员特点
   
   1.成员变量。
   编译时：参考引用型变量所属的类中是否有调用的成员变量，有编译通过，没有编译失败
   运行时：参考引用型变量所属的类中是否有调用的成员变量，有运行所属类中的成员变量
   简单说：编译和运行都参考等号左边。
   
   2.成员函数（非静态）
   编译时：参考引用型变量所属的类中的是否有调用的函数。有，编译通过，没有，编译失败
   运行时：参考的是对象所属的类中是否有调用的函数
   简单说：编译看左边，运行看右边
   
   
   3.静态变量
    编译时：参考引用型变量所属的类中是否有调用的静态方法。
    运行时：参考引用型变量所属的类中是否有调用的静态方法。
    简单说：编译和运行都参考等号左边。
    
    其实对于静态方法，是不需要对象的，直接用类名调用即可。
   
 

 
 
 
   
